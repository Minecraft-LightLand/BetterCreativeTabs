buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = "${ll_version}"
group = "dev.xkmc.${modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modid}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: "${minecraft_version}"
    //mappings channel: 'parchment', version: '1.19.3-2023.03.12-1.19.4'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=${modid}.mixins.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=${modid}.mixins.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg "-mixin.config=${modid}.mixins.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', "${modid}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${modid}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "${modid}.refmap.json"
    config "${modid}.mixins.json"
}

repositories {
    flatDir {
        dirs 'libs'
    }
    maven { url 'https://jitpack.io' }
    maven {
        // Location of the maven that hosts JEI files (and TiC)
        name 'Progwml6 maven'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven { // Registrate
        url "https://maven.tterrag.com/"
    }
    maven {
        // Location of the maven for vazkii's mods
        name 'blamejared'
        url 'https://maven.blamejared.com'
    }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compileOnly(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:${mixin_extras_version}"))
    implementation("com.github.llamalad7.mixinextras:mixinextras-forge:${mixin_extras_version}")
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    implementation fg.deobf("dev.xkmc.l2library:l2library:${l2library_version}-slim")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    implementation fg.deobf("dev.xkmc.l2serial:l2serial:1.2.2")

    implementation fg.deobf("mezz.jei:jei-${jei_minecraft_version}:${jei_version}")
    //implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curios_version}")
    implementation fg.deobf("curse.maven:curios-309927:5266541")

    //runtimeOnly fg.deobf('curse.maven:wthit-forge-455982:4512108')
    //runtimeOnly fg.deobf('curse.maven:badpackets-615134:4438956')
    //runtimeOnly fg.deobf('curse.maven:attributefix-280510:4445193')
    //runtimeOnly fg.deobf('curse.maven:max-health-fix-492246:4447240')

    //runtimeOnly fg.deobf('curse.maven:charm-of-undying-316873:3927421')
    //runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.19.2-76")

    //runtimeOnly fg.deobf('curse.maven:the-twilight-forest-227639:4516391')

    // TODO debug only
    runtimeOnly fg.deobf("curse.maven:mysterious-mountain-lib-368098:4589606")
    runtimeOnly fg.deobf("curse.maven:umapyoi-776121:4589608")
    //runtimeOnly fg.deobf("curse.maven:irons-spells-n-spellbooks-855414:4629398")
    runtimeOnly fg.deobf("curse.maven:caelus-308989:4581481")
    //runtimeOnly fg.deobf("curse.maven:geckolib-388172:4627674")
    //runtimeOnly fg.deobf("curse.maven:playeranimator-658587:4587214")

    runtimeOnly fg.deobf("curse.maven:kotlin-for-forge-351264:4778283")
    runtimeOnly fg.deobf("curse.maven:libipn-679177:4870127")
    runtimeOnly fg.deobf("curse.maven:inventory-profiles-next-495267:4813458")
    runtimeOnly fg.deobf("curse.maven:apothic-attributes-898963:4954000")
    runtimeOnly fg.deobf("curse.maven:placebo-283644:5098182")

}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "${modid}",
                "Specification-Vendor"    : "xkmc",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "xkmc",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs'            : "${modid}.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}